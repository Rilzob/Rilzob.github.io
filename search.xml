<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo使用攻略：添加分类及标签]]></title>
    <url>%2F2018%2F10%2F25%2FHexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5%EF%BC%9A%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE%E7%9A%84%E5%89%AF%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[Hexo使用攻略：添加分类及标签本教程针对的是Mac环境 Hexo创建”分类”选项生成”分类”页并添加type属性 打开命令行，cd进入博客所在文件夹。执行命令hexo new page categories，来新建一个页面，并命名为categories。成功后会提示：INFO Created: ~/hexo/source/categories/index.md 根据上面的路径找到index.md这个文件，打开后默认内容如下： 1234---title: categoriesdate: 2018-10-25 20:11:37--- 编辑新创建的页面，添加type: &quot;categories&quot;到内容中(注意，这些属性和属性值之间必须有一个空格)，主题将自动为这个页面显示所有分类，添加后是这样的： 12345---title: categoriesdate: 2018-10-25 20:11:37type: &quot;categories&quot;--- 保存并关闭文件。 给文章添加”categories”属性 打开需要添加分类的文章，为其添加categories属性。下方的categories: Python表示添加这篇文章到“Python”这个分类中。 注意：Hexo中一篇文章只能属于一个分类，也就是说如果在”Python”下方添加”-xxx”，Hexo不会产生两个分类，而是把分类嵌套，即该文章属于”Python“下的”-xxx“分类。 1234---title: Python中*args和**kwargs的用法总结categories: Python--- 回到hexo文件夹下，依次执行hexo g，hexo server和hexo deploy命令(重新部署)。 在Hexo菜单上添加分类选项 cd进/hexo/themes/hexo-theme-next-5.1.4文件夹内，编辑该目录下的_config.yml文件(把链接加上)，将源代码: 12345678910111213menu: home: / || home #about: /about/ || user #tags: /tags/ || tags #categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true 改为: 12345678910111213menu: home: / || home #about: /about/ || user #tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true 即将menu中的categories:/categories || th的注释去掉，然后保存并退出。 回到hexo文件夹下，依次执行hexo g，hexo server和hexo deploy命令，即可看到菜单栏中新增了一个Categories选项。 至此，成功给文章添加分类，点击Index上的Categories可以看到所有的分类情况，再点击该分类就可以看到该分类下的所有文章。当然，前提是添加了categories: xxx字段。 Hexo创建”标签”选项生成”标签”页并添加type属性 打开命令行，cd进入博客所在文件夹。执行命令hexo new page tags，来新建一个页面，并命名为tags。成功后会提示：INFO Created: ~/hexo/source/tags/index.md 根据上面的路径找到index.md这个文件，打开后默认内容如下： 1234---title: tagsdate: 2018-10-25 21:11:00--- 编辑新创建的页面，添加type: &quot;tags&quot;到内容中，主题将自动为这个页面显示所有分类，添加后是这样的： 12345---title: tagsdate: 2018-10-25 21:11:00type: &quot;tags&quot;--- 保存并关闭文件。 给文章添加”tags”属性 打开需要添加标签的文章，为其添加tags属性。下方的tags: Django表示添加这篇文章到“Django”这个标签中。 1234---title: Python中*args和**kwargs的用法总结tags: Django--- 回到hexo文件夹下，依次执行hexo g， hexo server和hexo deploy命令(重新部署)。 在Hexo菜单上添加标签选项 cd进/hexo/themes/hexo-theme-next-5.1.4文件夹内，编辑该目录下的_config.yml文件(把链接加上)，将源代码: 12345678910111213menu: home: / || home #about: /about/ || user #tags: /tags/ || tags #categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true 改为: 12345678910111213menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true 即将menu中的tags: /tags/ || tags的注释去掉，然后保存并退出。 回到hexo文件夹下，依次执行hexo g，hexo server和hexo deploy命令，即可看到菜单栏中新增了一个tags选项。 引用文章： 1.Hexo使用攻略-添加分类及标签 | linlif-blog 2.hexo怎么在菜单上添加页面和分类呢？ - SegmentFault 思否 3.hexo next 为文章添加分类 | 学而后知不足]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python中*args和**kwargs的用法总结]]></title>
    <url>%2F2018%2F10%2F25%2FPython%E4%B8%AD*args%E5%92%8C**kwargs%E7%9A%84%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93%E7%9A%84%E5%89%AF%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[Python中*args和**kwargs的用法总结一、基本概念Python支持可变参数，最简单的方法莫过于使用默认参数。 123456789101112131415def test_defargs(one, two=2): # 参数one没有默认值，two的默认值为2 print('Required argument:', one) print('Optional argument:', two) test_defargs(1)'''Required argument: 1Optional argument: 2'''test_defargs(1, 3)'''Required argument: 1Optional argument: 3''' 另一种达到可变参数(Variable Argument)的方法： 使用*args和**kwargs语法。 *args是可变的位置参数(postional arguments)列表； **kwargs是可变的关键词参数(keyword arguments)列表； 并且规定位置参数必须位于关键词参数之前，即*args必须位于**kwargs之前。 二、位置参数以下是用位置参数正确调用函数的实例： 12345678910def print_hello(name, sex): sex_dict = &#123;1: '先生', 2: '女士'&#125; print('Hello %s %s, welcome to Python World!' % (name, sex_dict.get(sex, '先生'))) # if no such a key, print '先生' print_hello('Chen', 2) # 位置参数要求先后顺序，对应name和sexprint_hello('Chen', 3) # 两个参数的顺序必须一一对应，且少一个参数都不可以'''Hello Chen 女士, welcome to Python World!Hello Chen 先生, welcome to Python World!''' 三、关键字参数用于函数调用，通过“键-值”形式加以指定。 使用关键字参数可以让函数更加清晰，容易使用，同时也清除了参数的顺序需求。 以下是用关键字参数正确调用函数的实例： 123print_hello('Chen', sex=1) # 有位置参数时，位置参数必须在关键字参数的前面# print_hello(1, name='Chen') # Python 3.x中这种写法是错误的print_hello(name='Chen', sex=1) # 关键字参数之间不存在先后顺序的,等价于print_hello(sex=1, name='Chen') 以下是错误的调用方式： 12# print_hello(name='Chen', 1) # 有位置参数时，位置参数必须在关键字参数前面# print_hello(sex=1, 'Chen') 四、可变参数顾名思义，可变参数就是传入的参数个数是可变的，可以是任意个。*args和**kwargs两者都是Python中的可变参数。 1.可变位置参数*argsPython中规定参数前带*的，称为可变位置参数，只是我们通常称这个可变位置参数为*args而已，叫其他的也是一样的。 以数学题为例，给定一组数字a，b，c……，请计算a^2 + b^2 + c^2 + ……。 要定义这个函数，必须确定输入的参数。由于参数个数不确定，我们可以首先想到把a，b，c……作为一个list或者tuple传进来，这样函数就可以定义为： 12345def calc(numbers): sum = 0 for n in numbers: sum = sum + n * n return sum 但是调用的时候，需要先组装出一个list或tuple： 1234&gt;&gt;&gt; calc([1, 2, 3])14&gt;&gt;&gt; calc([1, 3, 5, 7])84 所以，为了方便起见我们把函数的参数改为可变位置函数： 12345def calc(*numbers) # 可变位置参数 sum = 0 for n in numbers: sum = sum + n * n return sum 定义可变位置参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数： 1234&gt;&gt;&gt;calc(1,2)5&gt;&gt;&gt;calc()0 如果已经有一个list或tuple，要调用一个可变位置参数怎么办？可以这么做： 123&gt;&gt;&gt;nums = [1, 2, 3]&gt;&gt;&gt;calc(nums[0], nums[1], nums[2])14 这种做法当然是可行的，问题是太繁琐了，所以Python允许在list或tuple前面加一个*，把list或tuple的元素变成可变位置参数传进去： 123&gt;&gt;&gt;nums = [1, 2, 3]&gt;&gt;&gt;calc(*nums)14 总而言之，*args用来表示函数接收可变长度的非关键字参数列表作为函数的输入。我们可以通过以下这个例子进一步理解*args: 123456def test_args(normal_arg, *args): print('first normal arg:' + normal_arg) for arg in args: print('another arg through *args:' + arg) test_args("normal", "python", "java", "C#") 上面代码的执行结果如下： 1234first normal arg: normalanother arg through *args : pythonanother arg through *args : javaanother arg through *args :C# 2.可变关键字参数**kwargs同理，Python中规定参数前带 的，称为可变关键字参数，通常用kwargs表示。 **kwargs表示函数接收可变长度的关键字参数字典作为函数的输入。当我们需要函数接收带关键字的参数作为输入的时候，应当使用**kwargs。我们可以通过以下的例子进一步理解**kwargs: 123456789def test_kwargs(**kwargs): if kwargs is not None: for key, value in kwargs.iteritems(): print("&#123;&#125; = &#123;&#125;".format(key,value)) # Or you can visit kwargs like a dict() object # for key in kwargs: # print("&#123;&#125; = &#123;&#125;".format(key, kwargs[key])) test_kwargs(name="python", value="5") 以上代码的执行效果如下： 12name = pythonvalue = 5 以上例子只是*args和**kwargs基本使用的例子。下面再给出一个用*args和**kwargs来定义能够接受列表输入和字典输入的函数的例子。 3.使用*args和**kwargs来调用函数比如我们有如下接受普通输入参数的函数： 123456def normal_func(arg1, arg2, arg3): print("arg1: " + arg1) print("arg2: " + arg2) print("arg3: " + arg3)normal_func("python", 1, 3) 使用*args和**kwargs来调用这个函数的代码如下： 1234567# 使用*argsargs_list = ("python", 1, 3)normal_func(*args_list)# 使用**kwargskwargs_dict = &#123;"arg3": 3, "arg1": "python", "arg2": 1&#125;normal_func(**kwargs_dict) 以上三段代码的输出均为： 123arg1: pythonarg2: 1arg3: 3 引用文章： 1.Python中的 *args 和 **kwargs - 简书 2.函数的参数 - 廖雪峰的官方网站 3.python参数传递的*args和**kwargs - 简书]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[通过Hexo将文章上传到git.io的方法]]></title>
    <url>%2F2018%2F10%2F21%2F%E9%80%9A%E8%BF%87Hexo%E5%B0%86%E6%96%87%E7%AB%A0%E4%B8%8A%E4%BC%A0%E5%88%B0git.io%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[通过Hexo将文章上传到git.io的方法 编辑文章，生成markdown文件，并将文章放到/hexo/source/_posts目录下，一个md文件对应一篇博客文章。 修改文章头部： 123456---title: #博客标题date: #博客发布时间tags: #博客分类标签categories: #博客目录--- 在命令行中cd到_posts目录下并执行hexo generate命令(生成静态页面)。 再执行hexo server命令(本地上传文章)，上传后可以到http://localhost:4000/ 预览博客效果。 最后执行hexo deploy命令，上传文章到github.io上就完成了。 其他Hexo命令： hexo clean（清空资源文件，可选操作） hexo g （重新生成资源文件） 引用文章: 1.Hexo 发布文章到git.io步骤 - 程序男的专栏 - CSDN博客 2.hexo发布文章到个人博客上 - wl67920126的博客 - CSDN博客]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Django中path和url的区别]]></title>
    <url>%2F2018%2F10%2F21%2FDjango%E4%B8%ADpath%E5%92%8Curl%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[Django中path和url的区别django中url和path都是配置路径，有什么不同？ from django.urls import path from django.conf.urls import url path和url是两个不同的模块，效果都是响应返回界面，path调用的是python第三方模块或框架，而url则是自定义的模块。 例如： 1234url(r'^login', views.login)def login(request): return render(request, 'login.html') 引用自：Django中path和url的用法总结 当然，主要问题在于版本，1.x版本用url，2.x版本用path。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[介绍]]></title>
    <url>%2F2018%2F04%2F25%2F%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[Rilzob的个人blog随便写，随便看 邮箱： watermirrosir@163.com]]></content>
  </entry>
</search>
